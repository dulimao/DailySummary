文章：
https://blog.csdn.net/devnn/article/details/126837081
https://blog.csdn.net/wusj3/article/details/107975241
【【【【
    #注解处理器（APT）工作流程
    #第一步：创建注解处理器的Java类
    #第二步：注册Java注解处理器
        #方式有两种：
        #1：通过Google的AutoService库自动生成注册文件
        #annotationProcessor 'com.google.auto.service:auto-service:1.0.1'
        #implementation 'com.squareup:javapoet:1.13.0'
        #implementation 'com.google.auto.service:auto-service-annotations:1.0.1'
        #@AutoService(Processor.class)
        #2：自己创建注册文件
        #在META-INF/services目录下创建一个文件，文件名为javax.annotation.processing.Processor，文件内容为注解处理器的类名
    #第三步：在需要的module中加入注解处理器
    annotationProcessor project(':AnnotationCompiler')
】】】】


//讲讲Java中的注解处理器----------------
Java注解处理器是Java编译器的一个扩展点，它允许开发者在编译期间对源代码中的注解进行处理和解析。注解处理器可以通过Java的反射机制获取源代码中的注解信息，并根据注解信息生成新的源代码文件或者修改已有的源代码文件。

注解处理器的实现通常是一个Java类，它可以继承自javax.annotation.processing.AbstractProcessor类，并实现其process方法。process方法接收两个参数：一个是RoundEnvironment对象，用于获取当前轮次的注解信息；另一个是ProcessingEnvironment对象，用于获取注解处理器的一些上下文信息，比如编译参数、生成文件的方式等。

注解处理器可以通过调用RoundEnvironment对象的getElementsAnnotatedWith方法，获取指定注解类型的所有注解元素（比如类、方法、字段等）。然后可以通过遍历这些注解元素，获取注解的值，并根据不同的注解值做出相应的处理逻辑。

注解处理器可以用来生成源代码文件、XML配置文件、HTML文档等。生成新的源代码文件可以通过调用Filer对象的createSourceFile方法，并使用JavaPoet等工具库来生成源代码。生成XML配置文件可以使用JDOM、DOM4J等工具库。生成HTML文档可以使用Velocity、FreeMarker等模板引擎。

注解处理器的运行是在编译时期，可以通过在Java编译命令中加上-processor参数指定注解处理器的类名。同时，注解处理器还需要在META-INF/services目录下创建一个文件，文件名为javax.annotation.processing.Processor，文件内容为注解处理器的类名。

总而言之，Java注解处理器是一个在编译期间运行的工具，用于处理和解析源代码中的注解信息，并根据注解信息生成新的源代码文件或者修改已有的源代码文件。它可以为Java开发者提供更多的灵活性和功能扩展。


//讲讲java中的注解----------------------

/**
 * 很高兴你对例子感到有帮助，以下是对上述示例的一些进一步解释：
 *
 * ```java
 * import java.lang.annotation.ElementType;
 * import java.lang.annotation.Retention;
 * import java.lang.annotation.RetentionPolicy;
 * import java.lang.annotation.Target;
 *
 * @Retention(RetentionPolicy.RUNTIME) // 指定注解在运行时可见
 * @Target(ElementType.METHOD) // 指定注解的目标类型为方法
 * public @interface MyAnnotation {
 *     String value() default ""; // 定义名为 value 的成员变量，默认为空字符串
 *     int count() default 1; // 定义名为 count 的成员变量，默认为 1
 * }
 * ```
 *
 * 这段示例代码定义了一个名为 `MyAnnotation` 的注解，使用了元注解（meta-annotation）来指定注解的行为和使用方式。
 *
 * - `@Retention(RetentionPolicy.RUNTIME)`：在这个元注解上使用 `RetentionPolicy.RUNTIME` 参数，意味着注解在运行时是可见的，可以通过反射机制访问。
 *
 * - `@Target(ElementType.METHOD)`：这个元注解指定了注解的使用目标类型为方法（使用 `ElementType.METHOD`）。
 *
 * 注解的定义通过 `@interface` 关键字开始，后面是注解的名字 `MyAnnotation`。
 *
 * 接下来，定义了两个成员变量：
 *
 * - `String value() default "";`：这个成员变量名为 `value`，类型为 `String`，默认值为空字符串。在使用注解时，可以直接给该成员变量赋值。
 *
 * - `int count() default 1;`：这个成员变量名为 `count`，类型为 `int`，默认值为 1。同样，在使用注解时，也可以给 `count` 成员变量赋予不同的值。
 *
 * 当你需要在方法上使用这个自定义的注解时，可以这样：
 *
 * ```java
 * @MyAnnotation(value = "Hello", count = 5)
 * public void myMethod() {
 *     // 方法体
 * }
 * ```
 *
 * `@MyAnnotation` 表示你在这个方法上使用了自定义注解，并且通过 `value` 和 `count` 成员变量为注解提供了具体的值。
 *
 * 在运行时，你可以使用反射来获取方法上的注解以及注解中的成员变量值。例如：
 *
 * ```java
 * import java.lang.reflect.Method;
 *
 * public class Main {
 *     public static void main(String[] args) throws NoSuchMethodException {
 *         Method method = Main.class.getMethod("myMethod");
 *         MyAnnotation annotation = method.getAnnotation(MyAnnotation.class);
 *         System.out.println("Value: " + annotation.value());
 *         System.out.println("Count: " + annotation.count());
 *     }
 *
 *     @MyAnnotation(value = "Hello", count = 5)
 *     public void myMethod() {
 *         // 方法体
 *     }
 * }
 * ```
 *
 * 在上面的示例中，我们使用反射获取到 `myMethod` 方法上的注解，并打印出注解的成员变量值。
 *
 * 希望这样的进一步解释能够加深你对 Java 中注解的理解！如果还有其他问题，请随时提问。
 */



 //注解的作用是啥 ----------------------------

 注解在 Java 中具有以下作用：

 1. 提供额外的元数据：注解可以给代码添加额外的描述和标记，提供了一种元数据的方式。这些元数据可以用于编译器、解析器或运行时环境进行特定操作。

 2. 编译时检查：注解可以用于编译时进行检查和验证。例如，`@Override` 注解可以确保子类中的方法确实是覆盖了超类中的方法，从而避免了潜在的错误。

 3. 生成文档：注解可以用于生成文档。通过在代码中添加注解，特定的文档生成工具可以提取注解中的信息，并根据注解生成相应的文档。

 4. 自动生成代码：注解可以用于生成一些重复性的代码。通过自定义注解和相应的处理器，可以在编译时自动生成一些代码，减少了开发人员的工作量。

 5. 运行时处理：注解可以在运行时被读取和处理。通过反射机制，可以获取带有注解的类、方法或字段，并根据注解中的信息做出相应的处理，从而实现一些动态的操作。

 6. 框架和工具的集成：注解在许多开发框架和工具中被广泛使用。例如，Spring 框架使用注解来实现依赖注入、AOP 等功能；JUnit 使用注解来标记测试方法等。

 总的来说，注解为我们提供了一种灵活而强大的机制，可以在代码中添加额外的信息和逻辑，提高代码的可读性、可维护性和可扩展性。它们在许多方面提供了方便和便利，使我们能够更好地编写和组织代码。

 希望这个解答能帮助你理解注解的作用！如有任何其他问题，请随时提问。



 //写个生成代码的例子----------------------

 下面是一个简单的例子，展示如何使用注解和注解处理器来自动生成代码。

 首先，定义一个自定义注解 `GenerateGetter`，用于标记需要生成 getter 方法的字段。

 ```java
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;

 @Retention(RetentionPolicy.SOURCE)
 @Target(ElementType.FIELD)
 public @interface GenerateGetter {
 }
 ```

 然后，我们创建一个注解处理器来处理 `GenerateGetter` 注解，并根据注解生成相应的 getter 方法。

 ```java
 import javax.annotation.processing.*;
 import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 import java.util.Set;

 @SupportedAnnotationTypes("GenerateGetter")
 @SupportedSourceVersion(SourceVersion.RELEASE_8)
 public class GenerateGetterProcessor extends AbstractProcessor {

     private Types typeUtils;
     private Elements elementUtils;
     private Filer filer;

     @Override
     public synchronized void init(ProcessingEnvironment processingEnv) {
         super.init(processingEnv);
         typeUtils = processingEnv.getTypeUtils();
         elementUtils = processingEnv.getElementUtils();
         filer = processingEnv.getFiler();
     }

     @Override
     public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
         for (Element element : roundEnv.getElementsAnnotatedWith(GenerateGetter.class)) {
             // 只处理字段上的注解
             if (element instanceof VariableElement) {
                 VariableElement variableElement = (VariableElement) element;
                 String fieldName = variableElement.getSimpleName().toString();
                 String fieldType = variableElement.asType().toString();

                 // 生成 getter 方法
                 String getterMethod = "public " + fieldType + " get" + capitalize(fieldName) + "() {\n"
                         + "    return " + fieldName + ";\n"
                         + "}\n";

                 // 在控制台打印生成的 getter 方法
                 System.out.println(getterMethod);
             }
         }
         return true;
     }

     // 辅助方法：首字母大写
     private String capitalize(String str) {
         return Character.toUpperCase(str.charAt(0)) + str.substring(1);
     }
 }
 ```

 最后，在项目的 build.gradle 文件中，添加以下配置来指定注解处理器：

 ```groovy
 dependencies {
   // 添加 Java Annotation Processing API
   annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'
 }

 // 注解处理器配置
 javaCompileOptions {
     // 指定注解的源码路径
     annotationProcessorOptions {
         arguments = ['generateGetter.processor.inputPackages': project.getProperty('inputPackages')]
     }
     // 指定注解处理器类名
     annotationProcessorOptions.includeCompileClasspath = true
     annotationProcessorOptions.className = 'GenerateGetterProcessor'
 }
 ```

 在这个例子中，我们定义了一个自定义注解 `GenerateGetter`，用于标记需要生成 getter 方法的字段。然后，创建了注解处理器 `GenerateGetterProcessor`，在处理过程中检查标记了 `GenerateGetter` 注解的字段，并根据字段生成相应的 getter 方法。

 当你在代码中使用 `GenerateGetter` 注解标记字段时，注解处理器会在编译时处理这些注解，并打印出生成的 getter 方法代码。

 ```java
 public class ExampleClass {

     @GenerateGetter
     private String name;

     public static void main(String[] args) {
         ExampleClass example = new ExampleClass();
         example.setName("John");
         System.out.println(example.getName());
     }
 }
 ```

 在控制台编译该代码时，会输出生成的 getter 方法代码：

 ```java
 public java.lang.String getName() {
     return name;
 }
 ```

 这个简单的例子展示了如何使用注解和注解处理器来自动生成代码。在实际应用中，你可以根据需求扩展和定制该机制，例如生成其他类型的方法、自定义命名规则等。



