线程本地变量
现成如何访问共享内存中的变量---------------------------------
在Java内存模型中（Java Memory Model，简称JMM），每个线程都有自己的工作内存（也叫线程内存、栈内存），而对象实例和全局变量（包括static变量）则存储在共享内存中，也就是Java堆内存（Heap）。

单线程情境下，线程直接通过操作指令对堆内存进行读或写。

在多线程环境下，线程提高效率的一种方式就是把共享内存中的部分数据拷贝到自己的工作内存中，然后对工作内存中的数据进行操作，操作完成后再将数据写回到共享内存中。这样的好处是可以减少对共享内存的访问次数，因此可以大大提高效率。

但是，这种优化策略也导致了一个问题，即并发执行的线程之间可能会看到对方的中间状态，从而引发线程不安全的问题。比如，两个线程并发执行时，线程1修改了共享内存中的某个变量的值，但线程2读取这个变量的值时，可能还是旧值，因为线程1修改后的值可能还没有写回到共享内存。

对于Java来说，要解决这个问题，就需要用到synchronized或volatile这样的同步机制，强制让线程每次读取变量时都去共享内存中读取它的最新值，而每次线程修改变量后，都立刻写回到共享内存。这样，我就能保证每个线程能看到其他线程对变量的修改结果，从而保证了线程安全。