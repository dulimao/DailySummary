在处理线程等待条件时，通常推荐使用 `while` 循环而不是 `if` 语句来调用 `wait()` 方法，即使在很多情况下使用 `if` 也似乎能够正常工作。这么做的原因是避免所谓的 "spurious wakeups" 和确保在等待期间条件仍然满足。

**Spurious wakeup** 是指线程可能在没有任何明显的理由（即没有收到 `notify` 或者 `notifyAll`）的情况下被唤醒。这是线程机制中的一个已知现象，必须在代码中处理它。

此外，即使线程被 `notify` 方法唤醒，等待条件可能也不再满足。可能发生的情况是，在一个线程被唤醒和它重新获得锁之间，另一个线程可能已经改变了条件状态。使用 `while` 循环可以重新检查条件是否仍然满足，并在不满足时继续等待。

所以，使用 `while` 循环可以让你的线程安全地处理以下情况：
1. **Spurious wakeups**，线程可以重新检查条件并据此决定是否继续等待。
2. **条件可能在多个线程中改变**，每次从等待状态返回时重新检查条件可以保证一致性和正确性。
3. **多个线程等待相同条件的情况**，即使其中一个线程被唤醒并且继续执行，其他线程仍然可以正确地检查条件是否对它们来说是满足的。

因此，如果一个线程在等待一定条件发生后被唤醒，应该总是用 `while` 循环来包裹 `wait()` 调用，这样可以保证每次线程从等待中唤醒时都会重新检查等待条件，使程序更健壮和线程安全。

例如：

```java
synchronized (object) {
    while (<condition does not hold>) {
        object.wait();
    }
    // Perform action appropriate to condition
}
```

使用 `if` 可能会导致假设等待条件一直为真，而在并发环境中这是一种不安全的假设。如果条件在等待和锁重新获取之间发生变化，使用 `if` 将不会重新检查条件，可能导致错误的假设和难以追踪的bug。