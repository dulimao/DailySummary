//官网
https://zhuanlan.zhihu.com/p/422263257

工作区（目录）  --->    暂存区 ----> 仓库
coding ---> git add ---> git commit

#代码回退
git reset HEAD~1：回退到上一个提交
git reset <--mixed> <commit id>:保留工作目录，但是会移除暂存区，需要重新add，再commit
git reset --soft <commit id>:保留工作目录和暂存区，不需要重新add,直接可以commit
git reset --hard <commit id>:不保留工作目录和暂存区
git revert <commit id>  创建一个新的 commit，将指定的 commit 的更改撤销。这不会改变历史提交记录，而是创建一个新的撤销提交。

git branch <branch_name> <commit_id> :用指定commit_id创建新分支，用于回退代码

git stash -m "暂时隐藏":储藏修改
git stash list : 查看储藏列表
git stash apply {index}: 应用储藏代码到当前分支，index:列表索引
git stash drop {index}:删除储藏记录
git stash clear : 清空储藏记录

git reflog: 查看记录引用及哈希码，包括reset操作
git log：列出所有的提交历史记录。
git log -n：只显示最近 n 个提交。
git log --author=<author>：只显示特定作者的提交历史记录。
git log --since=<date>：只显示从指定日期之后的提交。
git log --until=<date>：只显示到指定日期的提交。
git log --oneline：以一行的简洁方式显示提交历史记录。
git log --graph :以图形形式输出历史记录
git log --graph <other_branch> ： 查看其他分支的提交记录

git init:初始化git仓库
git status
git add .
git add file.txt
git commit -m "..."
git remote add origin git@github.com:your-username/your-repository.git:本地仓库与远程仓库建立关联
git push -u origin master
git pull origin master
git remote -v :查看远程仓库地址

git branch
git branch new_branch:新建分支
git branch -d <branch>:删除分支
git branch -m <branch>:重命名当前分支
git checkout/switch <branch>:切换分支

git merge :将其他分支merge到当前分支
git rebase <branch> :用于在当前分支中应用其他分支上的变更
git rebase --abort:撤销rebase操作

<<<<<<< HEAD
// 代码来自当前分支的修改

=======
// 代码来自合并的分支的修改

>>>>>>> branch-name


git tag----------------
使用 Git 创建和管理标签非常简单。以下是一些常用的标签相关命令：

- `git tag`：列出所有的标签。
- `git tag <tag-name>`：在当前 HEAD 指向的提交上创建一个新的标签。
- `git tag -a <tag-name> -m "<message>"`：创建一个带有注释的标签。
- `git tag -d <tag-name>`：删除一个标签。
- `git push --tags`：将本地的标签推送到远程仓库。

当你创建标签后，可以使用 `git show <tag-name>` 命令来查看标签的详细信息。

标签和分支不同，标签更多地用于标识特定提交的快照，而分支是在提交历史中移动的指针。标签不会自动更新，需要手动创建和更新。因此，标签一般用于稳定的发布或重要的版本，不会随着开发的进展而改变。


git show--------
`git show` 是一个用于显示 Git 对象的命令，它可以显示提交（commit）、标签（tag）、分支（branch）以及其他 Git 对象的详细信息。

`git show` 命令的基本语法如下：

```shell
git show <object>
```

其中，`<object>` 可以是提交的标识符（commit hash）、标签名、分支名或其他 Git 对象的引用。

下面是 `git show` 命令在不同情况下的使用示例：

1. 显示最新提交的详细信息：

```shell
git show
```

2. 显示特定提交的详细信息：

```shell
git show <commit-hash>
```

3. 显示标签的详细信息：

```shell
git show <tag-name>
```

4. 显示分支的详细信息：

```shell
git show <branch-name>
```

当你运行 `git show` 命令后，它将显示包含以下信息的输出：

- 提交或对象的哈希值
- 作者和提交者的姓名和电子邮箱
- 提交日期和时间
- 提交时附加的备注信息（提交信息）
- 对象的内容变动和差异

通过运行 `git show` 命令，你可以浏览并了解 Git 对象的详细内容。这对于查看提交的更改、比较不同提交之间的差异以及了解项目的发展历史非常有帮助。

git diff --------------

`git diff` 是一个用于显示文件内容差异的 Git 命令。它可以比较文件的不同版本之间的变化，并以可读的方式显示这些变化。

`git diff` 命令的基本语法如下：

```shell
git diff [options] [commit] [commit]
```

其中，`[options]` 是可选的命令选项，用于进一步定制 `git diff` 命令的行为。`[commit] [commit]` 是可选的参数，用于指定要比较的提交。如果不提供提交参数，默认会比较当前工作区和暂存区之间的差异。

以下是一些常用的 `git diff` 命令选项和用法：

- `git diff`：比较当前工作区与暂存区之间的差异。
- `git diff --cached`：比较暂存区与最新提交之间的差异。
- `git diff <commit>`：比较当前工作区与指定提交之间的差异。
- `git diff <commit> <commit>`：比较两个指定提交之间的差异。
- `git diff --stat`：以简明统计的方式显示差异的摘要信息。
- `git diff --color-words`：以单词为单位突出显示差异。
- `git diff <branch>`：比较当前分支与指定分支之间的差异。
- `git diff <file>`：比较指定文件在不同版本之间的差异。

运行 `git diff` 命令后，它将以行的形式显示不同版本或文件之间的差异，显示被删除的行、添加的行以及发生变化的行。通过分析 `git diff` 的输出，你可以了解文件在不同版本之间的改动，并有效地跟踪和管理代码的变化。

注意：`git diff` 是用于比较文件内容之间的差异，与 `git log` 命令用于查看提交历史记录不同。

git命令大全------------

当然！以下是一些常用的 Git 命令的完整列表：

1. 创建和克隆仓库：
   - `git init`：初始化一个新的 Git 仓库。
   - `git clone <repository>`：克隆一个远程仓库到本地。

2. 基本操作：
   - `git add <file>`：将文件添加到暂存区。
   - `git commit -m "<message>"`：将暂存区的内容提交到本地仓库。
   - `git push`：将本地仓库的提交推送到远程仓库。
   - `git pull`：从远程仓库拉取最新的更改。
   - `git status`：显示工作区和暂存区的状态。
   - `git diff`：显示当前工作区与暂存区之间的差异。

3. 分支操作：
   - `git branch`：列出所有分支。
   - `git branch <branch-name>`：创建一个新的分支。
   - `git checkout <branch-name>`：切换到指定的分支。
   - `git merge <branch>`：将指定分支合并到当前分支。
   - `git rebase <branch>`：将当前分支的提交基础移动到指定分支上。

4. 提交历史和撤销操作：
   - `git log`：查看提交历史记录。
   - `git reset <commit>`：将 HEAD 移动到指定的提交。
   - `git revert <commit>`：撤销指定的提交。
   - `git cherry-pick <commit>`：选择并应用指定的提交。

5. 标签操作：
   - `git tag`：列出所有标签。
   - `git tag <tag-name>`：创建一个新的标签。
   - `git tag -d <tag-name>`：删除一个标签。
   - `git push --tags`：将本地标签推送到远程仓库。

6. 远程仓库：
   - `git remote add <name> <url>`：添加一个远程仓库。
   - `git remote -v`：显示远程仓库的详细信息。
   - `git fetch <remote>`：从远程仓库获取最新的代码和分支。
   - `git push <remote> <branch>`：将本地分支推送到远程仓库。

以上只是一些常用的 Git 命令，还有许多其他命令和选项可以根据需要使用。你可以通过运行 `git --help` 或查阅 Git 文档来获取更多关于每个命令的详细用法和参数。


【git config】
设置（或重设）仓库层面的用户名和邮箱：
git config user.name your_name
git config user.email your_email
git config --global user.name your_name
取消仓库层面的用户名：
git config --unset user.name
编辑仓库配置文件
git config -e     # 或
git config --edit
查询用户名：
git config --get user.name
查看配置
git config --local --list  # 查看仓库配置
git config --global --list # 查看用户配置
git config --system --list # 查看系统配置
--list 可以简写为 -l。